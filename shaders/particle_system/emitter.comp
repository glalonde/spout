#version 450 core
#include "particle.h"
#include "grid.h"
#include "hash.h"
#include "noise.h"
layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0) buffer Particles {
  Particle particles[];
};

layout(std140, set = 0, binding = 1) uniform Params {
    uint start_index;
    uint num_emitted;
    uvec2 position_start;
    uvec2 position_end;
    ivec2 velocity;
    float angle_start;
    float angle_end;

    float speed_min;
    float speed_max;
    float angle_spread;
    float ttl_min;
    float ttl_max;
    float time;
    float dt;
};

const float PI = 3.1415926535897932384626433832795;
const float PI_2 = 1.57079632679489661923;

// a % b
float signed_mod(float a, float b) {
  return a - floor(a/b) * b;
}

// Returns signed a - b
float angle_difference(float a, float b) {
  // https://stackoverflow.com/questions/1878907/the-smallest-difference-between-2-angles
  return signed_mod(a - b + PI_2, PI) - PI_2;
}

// The x shape of the wing
vec2 nozzle_shape(float interp) {
  const int rocket_width = 10;
  const int rocket_height = 10;
  const vec2 p0 = vec2(-rocket_height, rocket_width / 2);
  const vec2 p1 = vec2(0.0, 0.0);
  const vec2 p2 = vec2(-rocket_height, -rocket_width / 2);
  if (interp <= .5) {
  return mix(p0, p1, interp / .5) * kInnerGridSize;
  } else {
  return mix(p1, p2, (interp - .5) / .5) * kInnerGridSize;
  }
}

mat2 rotate2d(float angle){
    return mat2(/*first column=*/vec2(cos(angle),sin(angle)),
                /*second column=*/vec2(-sin(angle),cos(angle)));
}

void main() {
  int gid = int(gl_GlobalInvocationID.x);
  int total_particles = int(gl_NumWorkGroups * gl_WorkGroupSize);

  // "progress" in terms of number of emitted particles.
  int distance = gid - int(start_index);
  if (distance < 0) {
    // Wrap over the circular buffer.
    distance += total_particles;
  }
  if (distance >= num_emitted) {
    return;
  }

  const uint num_passes_per_iteration = 5;
  const uint emits_per_pass = uint(ceil(float(num_emitted) / float(num_passes_per_iteration)));
  const float t_interp = float(distance % num_passes_per_iteration) / float(num_passes_per_iteration);

  // Interpolated time through the iteration.
  float interp_time = (1.0 - t_interp) * dt + time;
  float smooth_interp_time = (1.0 - float(distance) / float(num_emitted - 1)) * dt + time;

  const float x_interp_step = 1.0 / float(emits_per_pass - 1);
  const float x_interp = (float(distance / num_passes_per_iteration) + (hash11(10000*smooth_interp_time) - .5)) * x_interp_step;

  float angle_delta = angle_difference(angle_end, angle_start);

  // Do all of the math as if the ship were at the origin oriented down the X axis, and then transform at the end.
  float local_emit_angle = noise2d(vec2(x_interp * 5.0, interp_time)) - .5 + PI;

  vec2 unit_emit_rotation = vec2(cos(local_emit_angle), sin(local_emit_angle));
  float local_emit_speed = mix(speed_min, speed_max, .5);
  vec2 local_emit_velocity = unit_emit_rotation * local_emit_speed;
  // This is "emit position on the wing" + "particle travel during the emission iteration"
  vec2 local_emit_position = nozzle_shape(x_interp) + local_emit_velocity * dt * t_interp;

  // Get the global frame of the ship.
  float ship_angle = mix(angle_start + angle_delta, angle_start, t_interp);
  ivec2 ship_position = ivec2(mix(position_end, position_start, t_interp));

  // Get a matrix that rotates points from the local frame to the global frame.
  mat2 local_rotate_global = rotate2d(ship_angle);
  particles[gid].position = position_start + ivec2(local_rotate_global * local_emit_position);
  particles[gid].velocity = ivec2(local_rotate_global * local_emit_velocity) + velocity;
  particles[gid].ttl = mix(ttl_min, ttl_max, .5);
}