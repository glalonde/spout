#version 450 core
#include "particle.h"
#include "grid.h"

layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Particles {
  Particle particles[];
};

layout (binding = 1, r32i) uniform iimage2D terrain_texture_bottom;
layout (binding = 2, r32i) uniform iimage2D terrain_texture_top;
layout (binding = 3, r32ui) uniform uimage2D density_texture;
layout(set = 0, binding = 4) uniform Params {
    float dt;
    uint level_width;
    uint level_height;
    uint bottom_level_height;
    uint middle_level_height;
    uint top_level_height;
    // It is assumed with viewport width is the same as the level width.
    uint viewport_height;
    uint viewport_bottom_height;
};

float Norm(in ivec2 vel) {
  vec2 f_vel = vec2(vel);
  return sqrt(f_vel.x*f_vel.x + f_vel.y * f_vel.y);
}

bool OnBotLevelBuffer(in uint y) {
  return y >= bottom_level_height && y < middle_level_height;
}

bool OnTopLevelBuffer(in uint y) {
  return y >= middle_level_height && y < top_level_height;
}

bool OnLevelBuffersX(in uint x) {
  return x >= 0 && x < level_width;
}

bool OnLevelBuffers(in uvec2 cell) {
  return OnLevelBuffersX(cell.x) && (OnTopLevelBuffer(cell.y) || OnBotLevelBuffer(cell.y));
}

void IncrementCell(in uvec2 cell) {
  cell.y -= viewport_bottom_height;
  imageAtomicAdd(density_texture, ivec2(cell), 1);
}

// Returns true if bounce occurred.
bool TryErodeTerrain(in uvec2 cell, in float speed) {
  const float damage_rate = .001;
  cell.y -= bottom_level_height;
  int test_value = imageLoad(terrain_texture_bottom, ivec2(cell)).x;
  if (test_value > 0) {
    int dmg_amt = int(damage_rate * speed);
    int actual_value = imageAtomicAdd(terrain_texture_bottom, ivec2(cell), -dmg_amt);
    return actual_value > 0;
  }
  return false;
}

void main() {
  uint gid = gl_GlobalInvocationID.x;
  Particle p = particles[gid];
  if (p.ttl <= 0) {
    return;
  }

  ivec2 signed_delta = ivec2(p.velocity * dt);
  uvec2 end_pos = p.position + signed_delta;

  ivec2 delta = abs(signed_delta);
  ivec2 step =
      ivec2(signed_delta.x >= 0 ? 1 : -1, signed_delta.y >= 0 ? 1 : -1);
  ivec2 current_cell = GetOuterGrid(p.position);
  ivec2 end_cell = GetOuterGrid(end_pos);
  ivec2 delta_i = end_cell - current_cell;

  // Starting cell remainder:
  ivec2 start_remainder =
      ivec2(kHalfInnerGridSize, kHalfInnerGridSize) - ivec2(GetInnerGrid(p.position));
  start_remainder *= step;
  ivec2 end_remainder = ivec2(GetInnerGrid(end_pos));

  // Error value
  int error = delta.x * start_remainder.y - delta.y * start_remainder.x;
  delta *= int(kInnerGridSize);

  // Update velocity
  ivec2 vel_out = p.velocity;

  int num_cells = abs(delta_i.x) + abs(delta_i.y);
  while (num_cells > 0) {
    int error_horizontal = error - delta.y;
    int error_vertical = error + delta.x;
    if (error_vertical > -error_horizontal) {
      // Horizontal step
      error = error_horizontal;
      current_cell.x += step.x;
      // Check cell
      bool bounce;
      if (OnLevelBuffers(current_cell)) {
        bounce = TryErodeTerrain(current_cell, Norm(vel_out));
      } else {
        bounce = true;
      }
      if (bounce) {
        // Bounce horizontally
        current_cell.x -= step.x;
        step.x *= -1;
        vel_out.x *= -1;
        end_remainder.y = int(kInnerGridSize) - end_remainder.y - 1;
      }
    } else {
      // Vertical step
      error = error_vertical;
      current_cell.y += step.y;
      // Check cell
      bool bounce;
      if (OnLevelBuffers(current_cell)) {
        bounce = TryErodeTerrain(current_cell, Norm(vel_out));
      } else {
        bounce = true;
      }
      if (bounce) {
        // Bounce vertically 
        current_cell.y -= step.y;
        step.y *= -1;
        vel_out.y *= -1;
        end_remainder.x = int(kInnerGridSize) - end_remainder.x - 1;
      }
    }
    --num_cells;
  }

  particles[gid].position = SetPositionRelative(uvec2(current_cell), uvec2(end_remainder));
  particles[gid].velocity = vel_out;
  particles[gid].ttl = p.ttl - dt;

  // Draw to the density texture
  IncrementCell(current_cell);
}