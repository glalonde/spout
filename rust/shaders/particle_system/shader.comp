#version 450 core
#include "particle.h"
layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Particles {
  Particle particles[];
};

layout (binding = 1, r32ui) uniform uimage2D counter_texture;
layout(set = 0, binding = 2) uniform Params {
    uint num_particles;
    float dt;
};

void main() {
  uint gid = gl_GlobalInvocationID.x;
  Particle p = particles[gid];
  if (p.ttl < 0) {
    return;
  }

  ivec2 texture_size = imageSize(counter_texture);
  // Update
  p.position += p.velocity;
  // Bounce
  if (p.position.x < 0 || p.position.x >= texture_size.x) {
    p.velocity.x *= -1;
  }
  if (p.position.y < 0 || p.position.y >= texture_size.y) {
    p.velocity.y *= -1;
  }
  p.position = clamp(p.position, ivec2(0, 0), texture_size - ivec2(1, 1));
  p.ttl -= dt;
  particles[gid] = p;
  // Add value to col, row
  imageAtomicAdd(counter_texture, p.position, 1);
}