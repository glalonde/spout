//float noise1d(float x)
//{
//    float i = floor(x);
//    float f = fract(x);
//    return mix(hash11(i), hash11(i + 1.0), smoothstep(0., 1., f));
//}

fn noise1d(x: f32) -> f32 {
    let i = floor(x);
    let f = fract(x);
    return mix(hash11(i), hash11(i + 1.0), smoothStep(0.0, 1.0, f));
}

fn noise2d(x: vec2<f32>) -> f32 {
  let i = floor(x);
  let f = fract(x);
  let a = hash12(i);
  let b = hash12(i + vec2<f32>(1.0, 0.0));
  let c = hash12(i + vec2<f32>(0.0, 1.0));
  let d = hash12(i + vec2<f32>(1.0, 1.0));
  let u = f * f * (3.0 - 2.0 * f);
  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}